{"version":3,"sources":["MapFunc.es6"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,MAAM,CAAC,OAAO,GAAG,CAAC,YAAM;;AAEpB,aAAS,IAAI,CAAC,GAAG,EAAC,KAAK,EAAE;AACrB,eAAO,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KACjC;;AAED,OAAG,CAAC,SAAS,CAAC,SAAS,GAAG,UAAU,GAAG,EAAE,KAAK,EAAE;AAC5C,YAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AACf,gBAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACxB,eAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAChB,mBAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SAC7B;AACD,eAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;KAC9B,CAAC;;AAEF,OAAG,CAAC,SAAS,CAAC,YAAY,GAAG,UAAU,GAAG,EAAE,KAAK,EAAE;AAC/C,YAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AACf,mBAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SACrD;AACD,eAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;KAC9B,CAAC;;AAEF,OAAG,CAAC,SAAS,CAAC,IAAI,GAAG,UAAU,aAAa,EAAE;AAC1C,YAAI,IAAI,GAAG,IAAI,CAAC;AAChB,YAAI,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AAC1C,gBAAQ,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC;AAC1B,YAAI,aAAa,EAAE;AACf,gBAAI,UAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/B;AACD,eAAO,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC9B,CAAC;;AAEF,OAAG,CAAC,SAAS,CAAC,GAAG,GAAG,YAAW;AAC3B,eAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC1B,CAAC;;AAEF,OAAG,CAAC,SAAS,CAAC,IAAI,GAAG,YAAW;AAC5B,eAAO,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;KACrD,CAAA;CACJ,CAAA,EAAG,CAAC","file":"MapFunc.js","sourcesContent":["'use strict';\nmodule.exports = (() => {\n\n    function _Map(key,value) {\n        return new Map([[key,value]]);\n    }\n\n    Map.prototype.setOrPush = function (key, value) {\n        if (this.has(key)) {\n            let tmp = this.get(key);\n            tmp.push(value);\n            return this.set(key, tmp);\n        }\n        return this.set(key, value)\n    };\n\n    Map.prototype.setOrCombine = function (key, value) {\n        if (this.has(key)) {\n            return this.set(key, this.get(key).concat(value));\n        }\n        return this.set(key, value)\n    };\n\n    Map.prototype.last = function (removeFromMap) {\n        let self = this;\n        let lastItem = Array.from(self.entries());\n        lastItem = lastItem.pop();\n        if (removeFromMap) {\n            this.delete(lastItem[0][0]);\n        }\n        return new Map([lastItem]);\n    };\n\n    Map.prototype.pop = function() {\n        return this.last(true);\n    };\n\n    Map.prototype.sort = function() {\n        return new Map(Array.from(this.entries()).sort());\n    }\n})();"]}