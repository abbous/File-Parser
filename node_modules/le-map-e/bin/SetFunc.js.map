{"version":3,"sources":["SetFunc.es6"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;AACb,MAAM,CAAC,OAAO,GAAG,CAAC,YAAM;;AAEpB,aAAS,IAAI,CAAE,KAAK,EAAE;AAClB,eAAO,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;KAC3B;;AAED,OAAG,CAAC,SAAS,CAAC,kBAAkB,GAAG,UAAU,GAAG,EAAC,KAAK,EAAE;AACpD,YAAI,IAAI,GAAG,IAAI,CAAC;AAChB,YAAI,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE;AAChB,mBAAO,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;SAC1C;AACD,YAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AACxC,mBAAO,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SAC3C;AACD,YAAI,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AACxC,WAAG,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAC,KAAK,CAAC,CAAC;AAC/B,eAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KACxB,CAAC;;AAEF,OAAG,CAAC,SAAS,CAAC,IAAI,GAAG,UAAS,aAAa,EAAC;AACxC,YAAI,KAAK,GAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AACxC,YAAI,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;AAC3B,YAAI,aAAa,EAAE;AACf,gBAAI,UAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SAC5B;AACD,eAAO,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;KAC5B,CAAC;;AAEF,OAAG,CAAC,SAAS,CAAC,GAAG,GAAG,YAAU;AAC1B,eAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC1B,CAAA;CAEJ,CAAA,EAAG,CAAC","file":"SetFunc.js","sourcesContent":["/**\n *  le-map-e\n * Author: michael\n * Date: 19.09.15.\n * License: MIT\n */\n'use strict';\nmodule.exports = (() => {\n\n    function _Set (value) {\n        return new Set([value]);\n    }\n\n    Set.prototype.deepMapAppendOrNew = function (key,value) {\n        let self = this;\n        if (self.size == 0) {\n            return this.add(new Map([[key,value]]))\n        }\n        if (Array.from(self.last()).pop().has(key)) {\n            return this.add(new Map([[key,value]]));\n        }\n        let tmp = Array.from(this.pop().keys());\n        tmp = tmp.pop().set(key,value);\n        return this.add(tmp);\n    };\n\n    Set.prototype.last = function(removeFromSet){\n        let items =  Array.from(this.entries());\n        let lastItem = items.pop();\n        if (removeFromSet) {\n            this.delete(lastItem[0]);\n        }\n        return new Set(lastItem);\n    };\n\n    Set.prototype.pop = function(){\n        return this.last(true);\n    }\n\n})();"]}