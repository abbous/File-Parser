{"version":3,"sources":["MapFuncTest.es6"],"names":[],"mappings":"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","file":"MapFuncTest.js","sourcesContent":["/**\n * xml2model\n * Author: michael\n * Date: 19.09.15.\n * License: MIT\n */\n'use strict';\nconst assert = require('assert');\nconst should = require('chai').should();\nconst maps = require('./../index');\n\ndescribe('MapFunc', function () {\n\n    describe('#setOrCombine()', () => {\n        it('should combine the arrays elements to', done => {\n            let a = new Map([[1,[2]]]);\n            a.setOrCombine(1, [3,4,5]);\n            a.should.be.a('Map');\n            a.get(1).should.be.a('Array');\n            a.get(1).should.have.lengthOf(4, 'a is a array with a length of 4');\n            done();\n        });\n    });\n\n    describe('#setOrPush()', () => {\n        it('should combine the arrays elements to', done => {\n            let a = new Map([[1,[2]]]);\n            a.setOrPush(1, [3,4,5]);\n            a.should.be.a('Map');\n            a.get(1).should.be.a('Array');\n            a.get(1).should.have.lengthOf(2);\n            a.get(1)[0].should.equal(2);\n            a.get(1)[1].should.be.a('Array');\n            a.get(1)[1].should.have.lengthOf(3);\n            done();\n        });\n    });\n\n\n    describe('#last()', () => {\n        it('should return a Map holding the last element of the current one, the current should remain unchanged', done => {\n            let a = new Map([[1,2],['a',4],['v',6]]);\n            let b = a.last(false);\n            b.should.be.a('Map');\n            Array.from(b.entries()).should.deep.equal([['v',6]]);\n            done();\n        });\n    });\n\n    describe('#pop()', () => {\n        it('should return a Map holding the last element of the current one, the current should have the last deleted', done => {\n            let a = new Map([[1,2],['a',4],['v',6]]);\n            let b = a.last(true);\n            b.should.be.a('Map');\n            Array.from(b.entries()).should.deep.equal([['v',6]]);\n            Array.from(a.entries()).should.deep.equal(Array.from(new Map([[1,2],['a',4]]).entries()));\n            done();\n        });\n    });\n\n    describe('#tt()', () => {\n        it('should return a Map holding the last element of the current one, the current should have the last deleted', done => {\n            let a = new Map([[1,2],['a',4],['v',6]]);\n            let c = new Map([[1,2],['a',4],['v',6]]);\n            let b = new Set([a]);\n            b.add(c);\n            done();\n        });\n    });\n\n    describe('#sort()', () => {\n        it('should return a ASC sorted map', done => {\n            let a = new Map([[1,2],['x',4],['v',6]]).sort();\n            console.log(a);\n            done();\n        });\n    });\n\n\n});"]}