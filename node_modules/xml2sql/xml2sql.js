var path = require('path');
var fs = require('fs');
var program = require('commander');
var parseXml = require('xml2js').parseString;
var ejs = require('ejs');

program
	.version(JSON.parse(fs.readFileSync(path.resolve(__dirname,"package.json"))).version)
	.option("-c, --conf <n>", "xml json 配置文件")
	.option("-t, --type <n>", "运行方式")
	.option("-d, --dest <n>", "生成的sql文件")
	.parse(process.argv);

(function(){

	var configs;
	var sqlContent = "";
	var templatePath = path.resolve(__dirname, path.join("tenjin", "sql.template"));
	var templateString = fs.readFileSync(templatePath).toString();
	var xmlPath;

	function xml2sql(xmlpath, conf){
		var pathtoxml = path.join(xmlPath, xmlpath);
		console.log(xmlpath);
		var data = fs.readFileSync(pathtoxml).toString();
		parseXml(data, function (err, result) {
   	 		var values;
   	 		for(var i in result){
   	 			for(var j in result[i]){
   	 				values = result[i][j];
   	 				break;
   	 			}
   	 		}

   	 		var maps = [];
   	 		for(var v in values){
   	 			var cells = [];
   	 			var svalues = [];
   	 			var v = values[v]["$"];
   	 			for(var key in v){
   	 				if(conf.mapping)
   	 				{
   	 					var skey = conf.mapping[key] || key;
   	 				}
   	 				cells.push("`"+skey+"`");
   	 				svalues.push(v[key]);
   	 			}
   	 			maps.push({keys:cells, values:svalues});
   	 		}
   	 		sqlContent += ejs.render(templateString, {table:conf.table, values:maps});

		});
    	
	}

	function genConf(conf){
		var pathtoconf = path.resolve(conf);
		xmlPath = path.dirname(pathtoconf);
		configs = JSON.parse(fs.readFileSync(pathtoconf).toString());
	}


	if(!program.conf || !program.type ||!program.dest) {
  		console.log("Please define the json path and export path, read more https://albin.ga");
   	 	require('openurl').open("https://albin.ga/");
	}else{
		genConf(program.conf);
		switch(program.type)
		{
			case "all":
			{
				for(xml in configs){
					xml2sql(xml, configs[xml]);
				}
				break;
			}
			default:
			{
				var conf = configs[program.type];
				if(conf)
					xml2sql(program.type, conf);
				break;
			}
		}  
		if(sqlContent) {
			fs.writeFileSync(program.dest, sqlContent, "utf-8");
		}	
	}
})();
