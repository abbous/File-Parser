/**
 * Packages
 */
const path = require('path')
const fs = require('fs')

/**
 * CSVTOHTML Class
 */
class CSVTOHTML {

  constructor() {
    this.settings = {
      csvDelimiter: ',',
      htmlTitle: false
    }
  }

  /**
   * Sets the input file path
   * @param {string} file Path to input file
   */
  setInputFile(file) {
    return this.addFile('inputFile', file) ? this : false
  }

  /**
   * Sets the output file path
   * @param {string} file Path to output file
   */
  setOutputFile(file) {
    return this.addFile('outputFile', file) ? this : false
  }

  /**
   * Update provided settings
   * @param {object} opts Settings to update
   */
  setOptions(opts) {
    this.settings = Object.assign(this.settings, opts)
    return this
  }

  /**
   * Converts the CSV to HTML
   */
  convert() {
    return new Promise((res, rej) => {
      fs.readFile(this.inputFile, 'utf8', (err, data) => {
        if (err) return rej(err)
        let rawLines = data.split('\n')
        if (rawLines.length < 2) return rej(new Error('You need at least a header and a data line in your csv file !'))
        let header = rawLines[0]
        rawLines.shift()
        let thead = '', tbody = ''
        header.split(this.settings.csvDelimiter).forEach((item) => thead += `<th>${item}</th>`)
        rawLines.forEach((line) => {
          let lineData = ''
          line = line.replace(/,,/g, ', ,')
          line.split(this.settings.csvDelimiter).forEach((item) => lineData += `<td>${item.replace(/"/g, "")}</td>`)
          tbody += '<tr>' + lineData + '</tr>'
        })
        let html = this.settings.htmlTitle != false ? `<html><head><title>${this.settings.htmlTitle}</title></head><table><thead><tr>${thead}</tr></thead><tbody>${tbody}</tbody></table></html>` : `<table><thead><tr>${thead}</tr></thead><tbody>${tbody}</tbody></table>`
        fs.writeFile(this.outputFile ? this.outputFile : __dirname + '/output.html', html, (err) => {
          if (err) return rej (err)
          res(this)
        })
      })
    })
  }

  /**
   * Parses CLI input and do the conversion
   * @param {object} program CLI input
   */
  parseGlobal(program) {
    this.setInputFile(program.input)
    this.setOutputFile(program.output)
    this.setOptions({
      csvDelimiter: program.delimiter,
      htmlTitle: program.title
    })
    this.convert()
  }

  /**
   * Adds file name and path to class
   * @param {string} name File's type (Input/Output)
   * @param {string} file File's path
   */
  addFile(name, file = null) {
    if (file != null) {
      this[name] = path.isAbsolute(file) ? path.normalize(file) : path.normalize(process.cwd() + path.sep + file)
      return true
    }
    console.error('You need to specify the file path !')
    return false
  }

}

module.exports = new ( CSVTOHTML )()