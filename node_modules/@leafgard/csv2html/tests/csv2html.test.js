/**
 * JEST Tests
 */
test('Add input file', () => {
  let CSV2HTML = require('../src')
  expect(
    CSV2HTML.setInputFile(__dirname + '/examples/')
  ).toBe(CSV2HTML)
})

test('Add input file without providing file', () => {
  let CSV2HTML = require('../src')
  expect(
    CSV2HTML.setInputFile()
  ).toBeFalsy()
})

test('Add output file', () => {
  let CSV2HTML = require('../src')
  expect(
    CSV2HTML.setOutputFile(__dirname + '/output.html')
  ).toBe(CSV2HTML)
})

test('Change converter options', () => {
  let CSV2HTML = require('../src')
  expect(
    CSV2HTML.setOptions({
      csvDelimiter: ';'
    })
  ).toBe(CSV2HTML)
  expect(
    CSV2HTML.settings.csvDelimiter
  ).toBe(';')
})

test('Add title to HTML document', () => {
  let CSV2HTML = require('../src')
  expect(
    CSV2HTML.setOptions({
      htmlTitle: 'Test'
    })
  ).toBe(CSV2HTML)
  expect(
    CSV2HTML.settings.htmlTitle
  ).toBe('Test')
})

test('Add output file without providing file', () => {
  let CSV2HTML = require('../src')
  expect(
    CSV2HTML.setInputFile()
  ).toBeFalsy()
})

it('tests error return if less then 2 lines provided input file', async () => {
  let CSV2HTML = require('../src')
  CSV2HTML.setInputFile(__dirname + '/examples/only-header.csv')
  expect.assertions(1)
  return expect(CSV2HTML.convert()).rejects.toThrow()
})

it('tests error return if non-existing provided input file', async () => {
  let CSV2HTML = require('../src')
  CSV2HTML.setInputFile(__dirname + '/examples/lolno.csv')
  expect.assertions(1)
  return expect(CSV2HTML.convert()).rejects.toThrow()
})

it('tests success return if existing provided input file has blank spaces', async () => {
  let CSV2HTML = require('../src')
  CSV2HTML.setInputFile(__dirname + '/examples/blank-spaces.csv')
  expect.assertions(1)
  return expect(CSV2HTML.convert()).resolves.toBe(CSV2HTML)
})

it('tests success return if existing provided input file', async () => {
  let CSV2HTML = require('../src')
  CSV2HTML.setInputFile(__dirname + '/examples/right.csv')
  expect.assertions(1)
  return expect(CSV2HTML.convert()).resolves.toBe(CSV2HTML)
})